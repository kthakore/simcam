<style>
  .pinhole_sidemenu_input {
    width: 50px !important
}

.matrix {
    position: relative;
}
.matrix:before {
    content: "";
    position: absolute;
    left: -6px;
    top: 0;
    border: 1px solid #000;
    border-right: 0px;
    width: 6px;
    height: 100%;
}
.matrix:after {
    content: "";
    position: absolute;
    right: -6px;
    top: 0;
    border: 1px solid #000;
    border-left: 0px;
    width: 6px;
    height: 100%;
}
</style>

<div class="row">

    <h1>Introduction</h1>

    <p>This tutorial will introduce you the concept of cameras, transformation, camera distortions and calibration. </p>

</div>

<div class="row">

    <h2>The Camera</h2>

    <p> 
      The concept of a camera has been around for a while. You may be familiar with cameras
      and capturing images with them. We will look a bit closer at exactly what a camera does.</p>

    <p>A camera "looks" at a far away object (The Big Ben) and shows it to you on a screen: </p> 

</div>
<div class="row" style="text-align: center"> 
        <div>
          <img src="/images/image09.jpg" /><br /> <center><span style="clear:both" class="small"> <a href="http://www.usingcellphones.com/">source</a> </span></center> 
        </div>
</div>

    <p>The first thing we would notice is that the final image (the screen) doesn't have a depth. Of course you can move closer to the Big Ben, but in the screen it only gets bigger.
       Lights and shading in the final image give an illusion of depth, but the final image it self is not a 3D object. This means at somepoint the camera translated the Big Ben
       light to a flat image. This transformation can be understand 
    </p>



    
<div class="row">
    <h3>Spatial Coordinates</h3>
    <p>
        The camera looks and draws the positions of objects, we need to have a way to understand positions. The cartesian coordinate system is one way to describe positions of objects in a space.  
    </p>
</div>
<div class="row" style="text-align: center"> 
        <div>
          <img src="/images/image10.png" /> <img src="/images/image13.png" /><br /> <center><span style="clear:both" class="small"> <a href="http://en.wikipedia.org/wiki/Cartesian_coordinate_system">source</a> </span></center> 
        </div>
</div>
<div class="row">
	<p class="well">NOTE: You can refresh your memory of the cartesian coordinate system <a href="http://en.wikipedia.org/wiki/Cartesian_coordinate_system">here</a>.</p
</div>




<div class="row">
    <h3>Camera Transform</h3>
    <p>
        Cameras transform the 3D cartesian coordinates to 2D cartesian coordinates. <span> Mathematically it can be described as: <img src="/images/image14.gif" /> </span>.
		Expanded: 
	</p>
</div>
<div class="row" style="text-align: center"> 
        <div>		
		<span><img src="/images/image04.gif" /></span>
		</div>
</div>
<div class="row">
	<p>
		A is a matrix that performs the transformation.  The transformation matrix is described by the pinhole camera model.
	</p>
	<p class="well">
		NOTE: Although while out of scope for this tutorial to review linear algebra and matrices transformation have a look <a href="https://www.khanacademy.org/math/linear-algebra">here</a>. 
	</p>
</div>

<div class="row">

    <h3>Pin hole Camera Model</h3>

    <p>The pinhole camera is a common model used to describe a camera. In this model the camera is described as a mathematical function called the perspective transform.
		In this model the camera matrix (A) is defined with several parameters. These parameters are the intrinsic parameters of the camera. </p>
		
	<h4>Intrinsic Parameters </h4>
	<p>The intrinsic parameters can be divided into two sets of parameters.</p>
	<h5>Linear Intrinsic Parameters</h5>
	<p>The linear intrinsic parameters are components of the camera matrix (A) seen below.</p>
</div>
<div class="row" style="text-align: center"> 
        <div>		
		<span><img src="/images/image08.gif" /></span>
        <center>
<table class="matrix" id="camera_matrix_table">
    <tr>
        <td>
            <input type="text" name="0" class="span1 pinhole_sidemenu_input" />
        </td>
        <td>
            <input type="text" name="1" class="span1 pinhole_sidemenu_input" />
        </td>
        <td>
            <input type="text" name="2" class="span1 pinhole_sidemenu_input" />
        </td>
    </tr>
    <tr>
        <td>
            <input type="text" name="4" class="span1 pinhole_sidemenu_input" />
        </td>
        <td>
            <input type="text" name="5" class="span1 pinhole_sidemenu_input" />
        </td>
        <td>
            <input type="text" name="6" class="span1 pinhole_sidemenu_input" />
        </td>
    </tr>
    <tr>
        <td>
            <input type="text" name="8" class="span1 pinhole_sidemenu_input" />
        </td>
        <td>
            <input type="text" name="9" class="span1 pinhole_sidemenu_input" />
        </td>
        <td>
            <input type="text" name="10" class="span1 pinhole_sidemenu_input" />
        </td>
    </tr>
</table>
</center>

        <b style="color:blue;">To see how the parameters change the camera adjust the linear intrinsic parameters in the table above.</b>


		</div>
</div>
<br />
<div class="row">	
		   <p>
		     Where the (<span><img src="/images/f_near.gif" /></span>,<span><img src="/images/f_far.gif" /></span>) are the focal lengths of the camera. 
             And the (<span><img src="/images/c_x.gif" /></span>,<span><img src="/images/c_y.gif" /></span>) are the center point of the final image that is made. 
	         The focal lengths describe where the camera can focus. 
	         If you have a webcam, see if you can find the (<span><img src="/images/f_near.gif" /></span>,<span><img src="/images/f_far.gif" /></span>)  in the environment below.  
			</p>
</div>

<div class="row-fluid" style="text-align:center">


<center id="environment" class="span12" style="padding:5px">
</center>
</div>
<div class="row">
<h2>Current Camera Extrinsics Camera</h2>
<p>The matrix below shows current pose (rotation|translation) matrix of the camera above. You can click and drag to move the camera, and hold shift while dragging to rotate the camera.</p>
        <center>
<table class="matrix" id="rt_matrix_table">
    <tr>
        <td>
            <input type="text" name="0" disabled="true" class="span3 rt_input" />
        </td>
        <td>
            <input type="text" name="4" disabled="true" class="span3 rt_input" />
        </td>
        <td>
            <input type="text" name="8" disabled="true" class="span3 rt_input" />
        </td>
        <td>
            <input type="text" name="12" disabled="true" class="span3 rt_input" />
        </td>

    </tr>
    <tr>
        <td>
            <input type="text" name="1" disabled="true" class="span3 rt_input" />
        </td>
        <td>
            <input type="text" name="5" disabled="true" class="span3 rt_input" />
        </td>
        <td>
            <input type="text" name="9" disabled="true" class="span3 rt_input" />
        </td>
        <td>
            <input type="text" name="13" disabled="true" class="span3 rt_input" />
        </td>

    </tr>
    <tr>
        <td>
            <input type="text" name="2" disabled="true" class="span3 rt_input" />
        </td>
        <td>
            <input type="text" name="6" disabled="true" class="span3 rt_input" />
        </td>
        <td>
            <input type="text" name="10" disabled="true" class="span3 rt_input" />
        </td>
        <td>
            <input type="text" name="14" disabled="true" class="span3 rt_input" />
        </td>

    </tr>
    <tr>
        <td>
            <input type="text" name="3" disabled="true" class="span3 rt_input dd" />
        </td>
        <td>
            <input type="text" name="7" disabled="true" class="span3 rt_input dd" />
        </td>
        <td>
            <input type="text" name="11" disabled="true" class="span3 rt_input dd" />
        </td>
        <td>
            <input type="text" name="15" disabled="true" class="span3 rt_input" />
        </td>

    </tr>
</table>
</center>


</div>

<div class="row">
    <h2>Camera Pose</h2>
    <p>
        Another matrix called the camera pose matrix describes the camera's current rotation and translation relative to the world. Knowing this matrix will allow you to do precise measurements with your camera! This matrix is also called the extrinsics parameters of the camera..
    </p>
        <p>You can move and rotate the camera in the view above to see how the rotation and translation matrix is affected. </p>
    <h3>Translation</h3>
    <p>
        When translating the camera away from the origin point of the world, the following matrix is applied to the pose matrix. 
    </p>

</div>
<div class="row" style="text-align: center"> 
        <div>		
		<img src="/images/translation.png" /><br />
        <center><a href="http://en.wikipedia.org/wiki/Translation_(geometry)">source</a></center>
		</div>
</div>

<div class="row">
    <p>This translation matrix would have the following effect on positions.</p>
</div>

<div class="row" style="text-align: center"> 
        <div>		
		<img src="/images/translation_effect.png" /><br />
        <center><a href="http://en.wikipedia.org/wiki/Translation_(geometry)">source</a></center>
		</div>
</div>

<div class="row">
    <p class="well">
        To learn more about translation matrices read this <a href="http://en.wikipedia.org/wiki/Translation_(geometry)">article</a>.
    </p>
</div>
<div class="row">
    <h3>Rotation</h3>
    <p>
        When rotating the camera relative to the origin point of the world, the following matrices are applied. 
    </p>

</div>
<div class="row" style="text-align: center"> 
        <div>		
		<span> <img src="/images/rotation_x.png" /> </span>
        <br />

        <center><a href="http://en.wikipedia.org/wiki/Translation_(geometry)">source</a></center>
		</div>
</div>


<div class="row">
    <p class="well">
        To learn more about rotation matrices read this <a href="http://en.wikipedia.org/wiki/Rotation_matrix">article</a>.
    </p>
</div>


<div class="row">

<h2>Questions:</h2>

</div>


<div class="row">
  <form class="form-horizontal" action="/session/<%=$session->milestone%>" method="post">
     <input type="hidden" name="position" />
     <div class="control-group">
          <!-- Button -->
          <div class="controls">
            <input type="submit" class="btn btn-success" value="Next" />
          </div>
        </div>

    </fieldset> 
   
  </form>
</div>



% content_for javascript => begin
    <script src="/js/tracker.js"></script>
    <script src="/js/libs/three.js"></script>

    <script src="/js/environment.js"></script>
    <!-- INSIDE SESSION 0 TEMPLATE -->
    <script type="text/javascript">

        function update_matrix (camera, app) {
                                        _.each(camera.matrix.elements, function(element, i) {
                                              var input = $('#rt_matrix_table').find('[name="'+i+'"]').val( element );
                                                if( input.hasClass('dd') === false ) {
                                                input.removeAttr('disabled' );
                                                 }
                                              if( input.attr('data-setted') === undefined ) {
                                              input.on('keyup', function() {
                                                var number = parseFloat( input.val(), 10 );
                                                if (number && number !== NaN ) {
                                                        camera.matrixAutoUpdate = false;
                                                        camera.updateMatrix();

                                                        camera.matrix.elements[i] = input.val();
                                        app.view.main_viewer.set_from_camera(camera);

                                                 } else { return false; }
                                              });
                                              input.attr('data-setted', 'true');
                                              } else {
                                                         camera.matrixAutoUpdate = true;
                                                        camera.updateMatrix();

                                            }
                                        });




        }

	    SimCam.initialize({ element: $('#environment'), 
                                     mode: { 
                                           'type': 'pinhole' 
                                        },
                                     success : function (app) {
                                        window.simcam = app;
                                        var camera = app.view.camera_viewer.camera;
                                        var camera_model = app.models.camera;
                                        camera_model.bind('move', function(  ) {  update_matrix(camera, app); } );

                                        _.each(camera.projectionMatrix.elements, function(element, i) {
                                             
                                              var input = $('#camera_matrix_table').find('[name="'+i+'"]').val( element );
                                              input.on('keyup', function() {
                                                var number = parseFloat( input.val(), 10 );
                                                if (number && number !== NaN ) {
                                                        camera.projectionMatrix.elements[i] = input.val();

                                                 } else { return false; }
                                              });
                                        });
                                       
                                    }
                                   });

    </script>
% end;


