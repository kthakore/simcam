<div class="row">
    <h1>Calibration</h1>
    <p>Calibration is the process with which we determine the two matrices we just discussed. The first one describing the camera matrix:</p> 
</div>

<div class="row" style="text-align: center"> 
        <div>		
		<span><img src="/images/image08.gif" /></span>
		</div>
</div>

<div class="row">
<p>
The second one describing the distortion coefficients matrix (or vector): 
</p>
</div>

<div class="row" style="text-align: center"> 

        <div>
          <img src="/images/distortions_coefficents.png" /><br /> <center><span style="clear:both" class="small"> <a href="http://docs.opencv.org/doc/tutorials/calib3d/camera_calibration/camera_calibration.html">source</a> </span></center> 
        </div>
</div>

<div class="row">
    <h2>Calibration Background</h2>
    <p> 
        To solve for these matrices we need to know how the camera behaves optically. This can be done by taking images of a pattern called a calibration grid. See an example of such an image below: </p>
 

<div class="row" style="text-align: center"> 
        <div>		
    		<img width="300px" src="/images/calibration.jpg" /><br />
    <center>
<span style="clear:both" class="small">Courtesy of Uditha Jayarathne from Robarts Medical Imaging Lab. </span></center> 
		</div>
</div>


<p>Once several of these images are captured, algorithms can be run to estimate the calibration parameters. There are a variety of algorithms run but most are based on Z. Zhang's algorithm. You can read about the algorithm in the papers below:
<ul>
 <li><a href="/zhang.pdf">A flexible new technique for camera calibration <b>Zhengyou Zhang</b></a></li>
 <li><a href="/zhang2.pdf">Zhang's Camera Calibration: Step by step <b>Lucas Teixeira, Marcelo Gattass, and Manuel Fernandez</b></a>
</ul>
</p>
<h2>Calibration Practice</h2>
 <p>
   In practical usage calibration is done using software. One library that does camera calibration based on Zhang's algorithm is OpenCV. To set up OpenCV and begin doing calibration with it have a look at <a href="http://docs.opencv.org/doc/tutorials/calib3d/camera_calibration/camera_calibration.html">this guide.</a>
</p>

<h3>Simulated Environment for Calibration</h3>
<p>Below is a simulated environment with a distorted camera. The environment also uses the OpenCV software to calibrate the distorted camera. To begin calibration move and place the grid in various positions and capture the images using the capture image button in the side menu (located on the right). You can see all your captured images on the bottom bar.</p>

<p>For the first calibration attempt 4 images need to be captured. As you capture each subsequent image, a calibration attempt is done. You can then click on view current results button to see your current camera matrix and distortion parameters, graphs showing changes in parameter values and finally the efficacy of each calibration attempt.</p>

<div class="tabbable"> <!-- Only required for left/right tabs -->
  <ul class="nav nav-tabs">
    <li class="active"><a href="#image_captures_tab" data-toggle="tab">Example Image Captures</a></li>
    <li><a href="#results_tab" data-toggle="tab">Final Results</a></li>
    <li><a href="#converge_tab" data-toggle="tab">Parameter Values</a></li>
  </ul>
  <div class="tab-content well">
    <div class="tab-pane active" id="image_captures_tab">
        <h4>Image Captures</h4>
<div id="myCarousel" class="carousel slide">
  <!-- Carousel items -->
  <div class="carousel-inner">
    <% foreach my $image ( 0...31) { %>
    <div class="item <%if( $image == 0 ) { %>active<% } %>">
        <div class="row-fluid" >
            <img class="span3" src="/images/calibration/<%=$image%>.png" />
            <div class="offset3"> 
                <p><b>Image Capture #<%=$image%></b> </p>
                <p>These are examples of a calibration grid captures. There are about 31 image captures taken for calibrating the camera below. The locations of the grids were selected to systematically cover the entire viewing area of the camera. Also note that severe rotations were used in the last two image captures, this is done to provide the OpenCV algorithm with knowledge of the focal lengths. After reviewing these images click on  </p>
            </div>
      
        </div>
    </div>
    <% } %>
  </div>
  <!-- Carousel nav -->
  <a class="carousel-control left" href="#myCarousel" data-slide="prev">&lsaquo;</a>
  <a class="carousel-control right" href="#myCarousel" data-slide="next">&rsaquo;</a>
</div>
    </div>
    <div class="tab-pane" id="results_tab">
       <div class="row-fluid"> <img class="span5" src="/images/calibration/results.png" />
      <p class="offset5"></p>
        </div>
    </div>
    <div class="tab-pane" id="converge_tab">
<div id="myCarousel2" class="carousel slide">
  <!-- Carousel items -->
  <div class="carousel-inner">

    <% foreach my $image ( 0..8 ) { %>
    <div class="item <%if( $image == 0 ) { %>active<% } %>">
        <div class="row-fluid">
            <img class="span5" src="/images/calibration/converge_center/center-<%=$image%>.png" />
            <p class="offset5"> <b>Convergence of value: </b> </p>
        </div>
    </div>
    <% } %> </div>
  <!-- Carousel nav -->
  <a class="carousel-control left" href="#myCarousel2" data-slide="prev">&lsaquo;</a>
  <a class="carousel-control right" href="#myCarousel2" data-slide="next">&rsaquo;</a>
</div>
   </div>
  </div>
</div>

<h3>Image captures for calibration</h3>
<p>Selection of the calibration image captures is vital for a good calibration attempt. Generally good image captures involve providing the calibration algorithm with the most information about the optical behaviour of the camera. This means that the image captures are balanced and unique.</p>
</div> 
<div class="row-fluid" style="text-align:center">
<center id="environment" class="span12" style="padding:5px">
</center>
</div>
<div class="row">
  <form class="form-horizontal" action="/session/<%=$session->milestone%>" method="post">

<%   
   my $questions = [ 
                    { 
                        name => 'How is the camera described mathematically in the pinhole camera model?', 
                        answers => [ 
                                        'A', 
                                        'b', 
                                        'c', 
                                        'd' , 
                                        'e' 
                                   ] 
                    },
               ]; 

%>

<%= include 'session/CV/questions_widget', questions => $questions %>
     <input type="hidden" name="position" />
     <div class="control-group">
          <!-- Button -->
          <div class="controls">
            <input type="submit" class="btn btn-success" value="Next" />
          </div>
        </div>

    </fieldset> 
   
  </form>
</div>


% content_for javascript => begin
    <script src="/js/tracker.js"></script>
    <script src="/js/libs/three.js"></script>

    <script src="/js/environment.js"></script>
    <!-- INSIDE SESSION 0 TEMPLATE -->
    <script type="text/javascript">

            
            var get_random_float = function() {  return Math.random() - ( Math.random() /( Math.random() * 10 )) }
            var setup = function () { SimCam.initialize({ element: $('#environment'), 
                                         mode: { 
                                               type: 'calibration' 
                                            },
                                         camera: {
                                            r1: 2
/*                                            r1 : get_random_float(),
                                            r2 : get_random_float(),
                                            r3 : get_random_float(),
                                            t1 : get_random_float() * get_random_float(),
                                            t2 : get_random_float() * get_random_float()
*/




                                         },
                                         success: function(app) { window.simcam = app } 

                                       });
            };

            var reset = function () { window.simcam.destroy(); if(Backbone.history){ Backbone.history.stop(); } $('#environment').html(''); setup(); };

            setup();

    $(function() {

    $('#myCarousel').carousel({interval:false})
    $('#myCarousel2').carousel({interval:false})

    });

    </script>
% end;

