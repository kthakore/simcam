/*jslint browser: true*//*jslint newcap: false*//*jslint nomen: true *//*global $, _, jQuery, Backbone, console, alert, THREE, requestAnimationFrame *//*jshint globalstrict: true*//**TODO:
 * Template for Calibration
 * Making 
 *
 */var SimCam={Version:.001,Template:{},Constructor:{Collection:{},Model:{},View:{},Router:{}}};SimCam.Constructor.Model.Generic=Backbone.Model.extend({}),SimCam.Template.MainFrame='<iframe src="/iframes/environment.html" allowfullscreen="true" webkitallowfullscreen="true" mozallowfullscreen="true" allowfullscreen="true" webkitallowfullscreen="true" mozallowfullscreen="true" frameborder="0" class="simcam_iframe" width="100%" height="640px" ></iframe>',SimCam.Template.SideMenu={pinhole:'<h5>Pinhole Camera Model</h5><li class="nav-header">Field of View</li><li><a href="javascript:void(0)"><input type="text" name="fov" class="span1 pinhole_sidemenu_input"/></a></li><li class="nav-header">Sensor Size in Pixels</li><li><a href="javascript:void(0)">X: <input type="text" name="u" class="span1 pinhole_sidemenu_input"/></a></li><li><a href="javascript:void(0)">Y: <input type="text" name="v" class="span1 pinhole_sidemenu_input"/></a></li><li class="nav-header">Aspect Ratio</li><li><a href="javascript:void(0)"><input type="text" name="aspect" class="span1 pinhole_sidemenu_input"/></a></li><li class="nav-header">Far</li><li><a href="javascript:void(0)"><input type="text" name="far" class="span1 pinhole_sidemenu_input" disabled="true" /></a></li><li class="nav-header">Near</li><li><a href="javascript:void(0)"><input type="text" name="near" class="span1 pinhole_sidemenu_input" disabled="true" /></a></li>',distortions:'<h5>Distortions</h5><li class="nav-header">Radial Distortions</li><li><a href="javascript:void(0)">R1: <input type="text" name="r1" class="span1 distortions_sidemenu_input"/></a></li><li><a href="javascript:void(0)">R2: <input type="text" name="r2" class="span1 distortions_sidemenu_input"/></a></li><li><a href="javascript:void(0)">R3: <input type="text" name="r3" class="span1 distortions_sidemenu_input"/></a></li><li class="nav-header">Tangential Distortions</li><li><a href="javascript:void(0)">TX<input type="text" name="t1" class="span1 distortions_sidemenu_input"/></a></li><li class="nav-header">Far</li><li><a href="javascript:void(0)">TY<input type="text" name="t2" class="span1 distortions_sidemenu_input" disabled="true" /></a></li>',matrix:'<h5>Apply Matrix</h5><li><input type="button" class="btn btn-primary matrix_sidemenu_apply_btn" value="Apply" /></li>'},console.log(SimCam.Templates),SimCam.Constructor.View.MainCanvas=Backbone.View.extend({initialize:function(e){"use strict";var t,n,r,i,s,o;t=this,t.bind("rendered",function(){e.render_cb&&e.render_cb(this)},t),t.mouse=new THREE.Vector2,t.offset=new THREE.Vector3,t.camera=new THREE.PerspectiveCamera(35,t.$el.innerWidth()/t.$el.innerHeight(),1,1e4),t.camera.position.set(45,45,45),t.controls=new THREE.OrbitControls(t.camera,t.$("canvas")[0]),t.controls.rotateSpeed=1,t.controls.zoomSpeed=1.2,t.controls.panSpeed=.8,t.controls.noZoom=!1,t.controls.noPan=!1,t.controls.staticMoving=!0,t.controls.dynamicDampingFactor=.3,t.scene=new THREE.Scene,t.objects=$([]),t.scene.add(new THREE.AmbientLight(5263440)),n=new THREE.SpotLight(16777215,1.5),n.position.set(0,500,2e3),n.castShadow=!0,n.shadowCameraNear=200,n.shadowCameraFar=t.camera.far,n.shadowCameraFov=50,n.shadowBias=-0.00022,n.shadowDarkness=.5,n.shadowMapWidth=2048,n.shadowMapHeight=2048,t.lights=$([]),t.lights.push(n),t.scene.add(n),r=new THREE.JSONLoader,r.load("/3d_objs/camera.js",function(e){var n,r,i;n=new THREE.Mesh(e,new THREE.MeshLambertMaterial({color:2228428})),n.material.ambient=n.material.color,n.position.set(0,0,15),n.scale.set(1,1,1),n.rotation.set(0,0,0),n.model=t.options.app.models.camera,r=new THREE.MeshLambertMaterial({map:THREE.ImageUtils.loadTexture("/img/grid.gif")}),r.map.needsUpdate=!0,i=new THREE.Mesh(new THREE.CubeGeometry(8,5,.1),r),i.model=t.options.app.models.grid,i.model.trigger("init",i.model,i),i.overdraw=!0,t.scene.add(i),t.objects.push(i),i.position.set(0,0,0),t.scene.add(n),t.objects.push(n),n.model.trigger("init",n.model,n)}),t.plane=new THREE.Mesh(new THREE.PlaneGeometry(4e3,4e3,4,4),new THREE.MeshBasicMaterial({color:0,opacity:.25,transparent:!0,wireframe:!0})),i=new THREE.Mesh(new THREE.PlaneGeometry(4e3,4e3,4,4),new THREE.MeshBasicMaterial({color:13369344,opacity:.25,transparent:!0,wireframe:!0})),s=new THREE.Mesh(new THREE.PlaneGeometry(4e3,4e3,4,4),new THREE.MeshBasicMaterial({color:52224,opacity:.25,transparent:!0,wireframe:!0})),o=new THREE.Mesh(new THREE.PlaneGeometry(4e3,4e3,4,4),new THREE.MeshBasicMaterial({color:204,opacity:.25,transparent:!0,wireframe:!0})),s.rotation.set(0,1.57079633,0),o.rotation.set(1.57079633,0,0),t.scene.add(i),t.scene.add(s),t.scene.add(o),t.plane.visible=!1,t.scene.add(t.plane),t.projector=new THREE.Projector,t.renderer=new THREE.WebGLRenderer({antialias:!0,clearColor:8947848,clearAlpha:255,canvas:t.$("canvas")[0]}),t.renderer.sortObjects=!1,t.renderer.setSize(t.$el.innerWidth(),window.innerHeight),t.renderer.shadowMapEnabled=!0,t.renderer.shadowMapSoft=!0,$(window).on("resize",function(){t.on_resize()}),t.animate()},to_screen_xy:function(e){"use strict";var t,n,r,i,s,o,u;return t=this,r=t.camera,i=t.$el,u=t.objects[e],n=u.position.clone(),s=new THREE.Matrix4,s.multiply(r.projectionMatrix,r.matrixWorldInverse),s.multiplyVector3(n),{x:(n.x+1)*i.width()/2+i.offset().left,y:(-n.y+1)*i.height()/2+i.offset().top}},events:{"mousemove canvas":"on_canvas_mmove","mousedown canvas":"on_canvas_mdown","mouseup canvas":"on_canvas_mup"},on_canvas_mmove:function(e){"use strict";e.preventDefault();var t,n,r,i,s,o,u,a,f,l,c;this.mouse.x=e.clientX/this.$el.innerWidth()*2-1,this.mouse.y=-(e.clientY/window.innerHeight)*2+1,t=new THREE.Vector3(this.mouse.x,this.mouse.y,.5),this.projector.unprojectVector(t,this.camera),n=new THREE.Ray(this.camera.position,t.subSelf(this.camera.position).normalize()),this.controls.enabled=!0;if(this.SELECTED){this.controls.enabled=!1,r=n.intersectObject(this.plane),r[0]&&r[0].point&&(e.shiftKey?(i=r[0].point.subSelf(this.offset),t=new THREE.Vector3(0,0,0),t.sub(this.SELECTED.position,i),s=new THREE.Vector3(0,0,-1),o=t.normalize(),u=(new THREE.Vector3).cross(s,o),a=u.length(),f=s.dot(o),l=Math.atan2(a,f),u.normalize(),c=new THREE.Mesh,c.useQuaternion=!0,c.quaternion.setFromAxisAngle(u,l),this.SELECTED.rotation.set(c.quaternion.x,c.quaternion.y,c.quaternion.z),this.SELECTED.rotation.multiplyScalar(.5)):this.SELECTED.position.copy(r[0].point.subSelf(this.offset)),this.SELECTED.model.trigger("move",this.SELECTED.model,this.SELECTED));return}r=n.intersectObjects(this.objects),r.length>0?(this.INTERSECTED!==r[0].object&&(this.INTERSECTED&&this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex),this.INTERSECTED=r[0].object,this.INTERSECTED.currentHex=this.INTERSECTED.material.color.getHex(),this.plane.position.copy(this.INTERSECTED.position),this.plane.lookAt(this.camera.position),this.plane.rotation.copy(this.camera.rotation)),this.el.style.cursor="pointer"):(this.INTERSECTED&&this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex),this.INTERSECTED=null,this.el.style.cursor="auto")},on_canvas_mdown:function(e){"use strict";var t,n,r,i;t=this,e.preventDefault(),n=new THREE.Vector3(t.mouse.x,t.mouse.y,.5),t.projector.unprojectVector(n,t.camera),r=new THREE.Ray(t.camera.position,n.subSelf(t.camera.position).normalize()),i=r.intersectObjects(t.objects),i.length>0&&(t.controls.enabled=!1,t.SELECTED=i[0].object,i=r.intersectObject(t.plane),t.offset.copy(i[0].point).subSelf(t.plane.position),t.el.style.cursor="move")},on_canvas_mup:function(e){"use strict";e.preventDefault(),this.controls.enabled=!0,this.INTERSECTED&&(this.plane.position.copy(this.INTERSECTED.position),this.SELECTED=null),this.el.style.cursor="auto"},on_resize:function(e){"use strict";this.camera.aspect=this.$el.innerWidth()/this.$el.innerHeight(),this.camera.updateProjectionMatrix(),this.renderer.setSize(this.$el.innerWidth(),this.$el.innerHeight())},animate:function(){"use strict";var e=this;requestAnimationFrame(function(){e.animate()}),e.render()},render:function(){"use strict";var e;e=this,e.rendered===undefined&&e.objects.length>0&&(e.rendered=!0,e.trigger("rendered")),e.controls.update(),e.renderer.render(e.scene,e.camera)}}),SimCam.Constructor.View.SideCanvas=Backbone.View.extend({initialize:function(e){"use strict";var t,n,r,i,s,o;t=this,t.options=e,t.camera=new THREE.PerspectiveCamera,r=e.app.models.camera,r.set("fov",t.camera.fov),r.set("aspect",t.camera.aspect),r.set("far",t.camera.far),r.set("near",t.camera.near),r.set("u",200),r.set("v",200),r.trigger("set",r),t.camera.position.set(0,0,15),t.scene=new THREE.Scene,t.scene.add(new THREE.AmbientLight(5263440)),n=new THREE.SpotLight(16777215,1.5),n.position.set(0,500,2e3),n.castShadow=!0,n.shadowCameraNear=200,n.shadowCameraFar=t.camera.far,n.shadowCameraFov=50,n.shadowBias=-0.00022,n.shadowDarkness=.5,n.shadowMapWidth=2048,n.shadowMapHeight=2048,t.scene.add(n),i=new THREE.MeshLambertMaterial({map:THREE.ImageUtils.loadTexture("/img/grid.gif")}),i.map.needsUpdate=!0,s=new THREE.Mesh(new THREE.CubeGeometry(8,5,.1),i),s.overdraw=!0,t.scene.add(s),t.grid=s,t.camera.lookAt(t.grid),t.camera.rotation.set(0,0,0),o=t.$("canvas"),t.renderer=new THREE.WebGLRenderer({antialias:!0,clearColor:8947848,clearAlpha:255,canvas:t.$("canvas")[0]}),t.renderer.sortObjects=!1,t.renderer.setSize(o.innerHeight(),o.innerWidth()),e.app.models.grid.bind("move",function(e,n){t.update_grid(e,n)}),e.app.models.camera.bind("move",function(e,n){t.update_cam(e,n)}),e.app.models.camera.bind("update_pinhole_params",function(e){t.on_update_pinhole_params(e)}),$(window).on("resize",function(){t.on_resize()}),t.animate(),t.on_resize()},events:{},on_resize:function(){"use strict";var e,t,n,r;e=this,r=e.options.app.models.camera,t=r.get("u"),n=e.$el,e.renderer&&e.renderer.setSize(t*e.camera.aspect,t)},animate:function(){"use strict";var e=this;requestAnimationFrame(function(){e.animate()}),e.render()},render:function(){"use strict";var e=this;e.renderer.render(e.scene,e.camera)},update_grid:function(e,t){"use strict";var n,r;n=this,n.grid.position.copy(t.position),n.grid.rotation.copy(t.rotation)},update_cam:function(e,t){"use strict";var n,r;n=this,r=n.options.app.models.camera,n.camera.position.copy(t.position),n.camera.rotation.copy(t.rotation)},on_update_pinhole_params:function(e){"use strict";var t,n;t=this,_.each(e.attributes,function(e,n){t.camera[n]=e}),t.camera.updateProjectionMatrix(),t.on_resize(),t.render()}}),SimCam.Constructor.View.SideMenu=Backbone.View.extend({initialize:function(e){"use strict";var t;t=this,t.app=e.app,t.render(e.mode),t.app.models.camera.bind("set",t.on_camera_model_set,t)},events:{"keyup .pinhole_sidemenu_input":"on_change_pinhole_sidemenu_input"},render:function(e){"use strict";var t,n;t=this,n=SimCam.Template.SideMenu[e.type],n===undefined&&(n="Sidemenu template not implemented for: "+e.type),t.$(".body").html(n)},on_camera_model_set:function(e){"use strict";var t,n;t=this,n=e.attributes,_.each(n,function(e,n){t.$('[name="'+n+'"]').val(e)})},on_change_pinhole_sidemenu_input:function(e){"use strict";var t,n,r,i,s,o,u;t=this,n=$(e.currentTarget),r=n.attr("name"),i=n.val(),s=t.app.models.camera,s.set(r,i),r==="u"?(o=i,u=s.get("v"),s.set("aspect",o/u),t.$('[name="aspect"]').val(o/u)):r==="v"&&(u=i,o=s.get("u"),s.set("aspect",o/u),t.$('[name="aspect"]').val(o/u)),s.trigger("update_pinhole_params",s)}}),SimCam.Constructor.View.BottomBarImage=Backbone.View.extend({initialize:function(e){"use strict";}}),SimCam.Constructor.View.BottomBar=Backbone.View.extend({initialize:function(e){"use strict";}}),SimCam.Constructor.View.Main=Backbone.View.extend({initialize:function(e){"use strict";var t,n,r,i,s,o,u,a;t=this,t.mode=e.mode,n=t.$("#main_viewer"),r=t.$("#camera_viewer"),i=$(n[0].contentDocument).find("body"),s=$(r[0].contentDocument).find("body"),u=t.$(".bottom_bar"),o=t.$(".sidemenu"),t.bottom_bar_viewer=new SimCam.Constructor.View.BottomBar({el:u,mode:t.mode,app:e.app}),t.side_bar_viewer=new SimCam.Constructor.View.SideMenu({el:o,mode:t.mode,app:e.app}),t.main_viewer=new SimCam.Constructor.View.MainCanvas({el:i,mode:t.mode,app:e.app,render_cb:function(e){t.on_main_viewer_render(e)}}),t.camera_viewer=new SimCam.Constructor.View.SideCanvas({el:s,mode:t.mode,app:e.app}),n.on("load",function(){t.main_viewer.trigger("load")}),r.on("load",function(){t.camera_viewer.trigger("load")}),t.mode.learning_environment&&(a=t.$('[data-toggle="popover"]'),a.popover({html:!0}),a.popover("toggle"))},events:{load:"on_load","click .close_popover":"on_click_close_popover"},on_main_viewer_render:function(e){"use strict";var t;t=this;if(!t.options.learning_environment)return;_.each(e.objects,function(n,r){var i,s,o;s=e.to_screen_xy(r),i=$('<p style="position:absolute; z-index:4; top: '+s.y+"px; left: "+s.x+'px;" data-toggle="popover" ></p>'),t.$el.append(i),o="top",r%2&&(o="bottom"),i.popover({placement:o,html:!0,title:"3D element",content:'Click and drag to move. Hold shift and drag to rotate. <input type="button" class="close_popover btn" value="close">'}),i.popover("toggle")})},on_load:function(){"use strict";},on_click_close_popover:function(e){"use strict";var t,n,r;t=this,n=$(e.currentTarget),r=$(n.parents(".popover").prevAll('[data-toggle="popover"]')[0]),r.popover("toggle")},render:function(){"use strict";var e;e=this}}),SimCam.Constructor.Router.App=Backbone.Router.extend({version:.01,initialize:function(e){"use strict";var t,n,r;t=this,t.element=e.element,t.models={camera:new SimCam.Constructor.Model.Generic({}),grid:new SimCam.Constructor.Model.Generic},n=$(SimCam.Template.MainFrame),n.load(function(){t.on_env_frame_load(e,n)}),t.element.append(n)},routes:{"":"default_route"},default_route:function(){"use strict";var e;e=this},on_env_frame_load:function(e,t){"use strict";var n,r;n=this,r=$(t[0].contentDocument).find("body"),n.view=new SimCam.Constructor.View.Main({el:r,mode:e.mode,app:n}),n.view.render()}}),SimCam.initialize=function(e){"use strict";var t,n;return n=new Image,n.onload=function(){t=new SimCam.Constructor.Router.App(e),Backbone.history.start()},n.src="/img/grid.gif",t};