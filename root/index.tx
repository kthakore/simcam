<html lang="en">
    <head> 
        <meta charset="utf-8">
          <title>SimCam</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta name="description" content="SimCam">
        <meta name="author" content="Kartik Thakore">
        <link href="<: $c.uri_for('/static') :>/css/bootstrap.min.css" rel="stylesheet">
        <link href="<: $c.uri_for('/static') :>/css/bootstrap-responsive.min.css" rel="stylesheet">
    <style>
        body {
            padding-top: 60px; /* 60px to make the container go all the way to the bottom of the topbar */
        }
    </style>

    </head>

  <body>
    
    <div class="navbar navbar-fixed-top center">
        <div class="navbar-inner" >
            <div class="container-fluid" >   
                <a class="brand" href="#">SIMCAM</a>

                <ul class="nav pull-right">
                  <li><a href="#camera">CAMERA</a></li>
                  <li><a href="#calibration">CALIBRATION</a></li>
                  <li><a href="#results">RESULTS</a></li>
                </ul>
            </div>
        </div>
    </div> 

    <div class="container" id="main_container">
    <header class="jumbotron subhead" id="overview">
      <h1>SimCam</h1>

      <p class="lead">Camera calibration and simulation application.</p>

    </header> 
       <div class="row" >
            <div class="span7" id="content" >
        <canvas id="canvas-element-id" width="640" height="480" class="well">
					<p>
						Your browser does not support WebGL :-(
					</p>
		</canvas>

             </div>
            <div class="span4" id="sidebar" > 
                <h2>Options</h2>
            <ul class="well sidemenu nav nav-pills nav-stacked">
                <li><a href="#" id="check_grid">Calibrate</a> </li>
                <li><a href="#" id="reset">Reset</a> </li>
            </ul>
                <h2>Grid Placement</h2>
            <div class="well">
               <table class="table table-striped table-bordered table-condensed">
                                <tr> <td>Location</td><td>(<input size="3" class="loc span1" />, <input size="3" class="loc span1" />, <input size="3" class="loc span1" />) </td> </tr>
                                <tr> <td>Rotation</td><td>(<input size="3" class="rot span1" />, <input size="3" class="rot span1" />, <input size="3" class="rot span1" />) </td> </tr>
               </table> 
           </div>
       </div>
       <div class="row">
            <div class="span10">
              <h2>Calibration Graph</h2>
              <div id="g_container" style="min-width: 400px; height: auto; margin: 0 auto"> 
                <p>Need more calibration points</p>
              </div>
            </div>
       </div>
       <div class="row">
            <div class="span8" >
            <h2>Current Calibration</h2>
                <div id="calib" >
                    <div id="Distortion">
                        <h4>Current Distortion Parameters</h4>
                        <table class="table table-bordered table-condensed">
                          <tr><td></td><td></td><td></td><td></td><td></td></tr>
                        </table>
                    </div>
                     <div id="Intrinsics">
                        <h4>Current Intrinsics Parameters</h4>
                        <table class="table table-striped table-bordered table-condensed" >
                          <tr><td></td><td></td><td></td></tr>
                          <tr><td></td><td></td><td></td></tr>
                          <tr><td></td><td></td><td></td></tr>
                        </table>
                    </div>
                    
                </div>

            </div>
            <div class="span4" >
             <h2>Checked Images</h2>
               <table class="table table-striped table-bordered table-condensed" id="images">
                <thead>
                <tr>
                    <th>Image</th>
                    <th>Grid Found Image</th>
                </tr>
                </thead>
                <tbody>
                </tbody>
                </table>
 

            </div>
        </div>
    </div>

    <!-- Templates -->
        <script type="text/template" id="canvas-template">
        </script>
   
    <!-- Javascript -->
        <script type="text/javascript" src="<: $c.uri_for('/static') :>/js/jquery.min.js">        </script>
        <script type="text/javascript" src="<: $c.uri_for('/static') :>/js/underscore-min.js">    </script>
        <script type="text/javascript" src="<: $c.uri_for('/static') :>/js/backbone-min.js">      </script>
        <script type="text/javascript" src="<: $c.uri_for('/static') :>/js/bootstrap.min.js">     </script>
        <script type="text/javascript" src="<: $c.uri_for('/static') :>/js/highcharts.js">        </script>
        <script type="text/javascript" src="<: $c.uri_for('/static') :>/js/modules/exporting.js"> </script>

      
        <!-- MATH Libraries //-->
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/math/glMatrix-0.9.5.min.js'></script>
		<!-- WEBGL Libraries //-->
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/Globals.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/Utils.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/Program.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/Scene.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/Axis.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/Floor.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/Camera.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/CameraInteractor.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/SceneTransforms.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/Texture.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/WebGLApp.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/Picker.js'></script>

		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/base64.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/canvas2image.js'></script>
        <script type='text/javascript'>
          
            var current_canvas_render;

        </script>

		<script id="shader-vs" type="x-shader/x-vertex">
			attribute vec3 aVertexPosition;
			attribute vec3 aVertexNormal;
			attribute vec4 aVertexColor;
			attribute vec2 aVertexTextureCoords;

			uniform mat4 uMVMatrix;
			uniform mat4 uPMatrix;
			uniform mat4 uNMatrix;
			uniform vec3 uLightPosition;
			uniform vec4 uMaterialDiffuse;
			uniform bool uWireframe;
			uniform bool uUseVertexColor;
			uniform bool uUseTextures;

			varying vec3 vNormal;
			varying vec3 vLightRay;
			varying vec3 vEyeVec;
			varying vec4 vFinalColor;
			varying vec2 vTextureCoord;

			void main(void) {

			vFinalColor = uMaterialDiffuse;
			vTextureCoord = vec2(0.0);

			if (uUseVertexColor){
			vFinalColor = aVertexColor;
			}

			if (uUseTextures){
			vTextureCoord = aVertexTextureCoords;
			}

			vec4 vertex = uMVMatrix * vec4(aVertexPosition, 1.0);
			vNormal = vec3(uNMatrix * vec4(aVertexNormal, 1.0));
			vec4 light = vec4(uLightPosition,1.0);
			vLightRay = vertex.xyz-light.xyz;
			vEyeVec = -vec3(vertex.xyz);

			vec4 pos = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
            gl_Position = pos;

			}
		</script>
		<script id="shader-fs" type="x-shader/x-fragment">
			#ifdef GL_ES
			precision highp float;
			#endif

			uniform bool uWireframe;
			uniform bool uUseTextures;

			uniform vec4 uLightAmbient;
			uniform vec4 uLightDiffuse;
			uniform vec4 uMaterialAmbient;
			uniform vec4 uMaterialDiffuse;
			uniform bool uOffscreen;

			uniform sampler2D uSampler;

			varying vec3 vNormal;
			varying vec3 vLightRay;
			varying vec3 vEyeVec;
			varying vec4 vFinalColor;
			varying vec2 vTextureCoord;

			void main(void)
			{
			if(uOffscreen){
			gl_FragColor = uMaterialDiffuse;
			return;
			}

			if(uWireframe){
			gl_FragColor = vFinalColor;
			}
			else{
			//ambient term
			vec4 Ia = uLightAmbient * uMaterialAmbient;

			//diffuse term
			vec3 L = normalize(vLightRay);
			vec3 N = normalize(vNormal);
			float lambertTerm = max(dot(N,-L),0.33);
			vec4 Id = uLightDiffuse * uMaterialDiffuse * lambertTerm;

			//specular term
			vec3 E = normalize(vEyeVec);
			vec3 R = reflect(L, N);
			float specular = pow( max(dot(R, E), 0.5), 50.0);
			vec4 Is = vec4(0.5) * specular;

			//result
			vec4 finalColor = Ia + Id + Is;

			if (uMaterialDiffuse.a != 1.0) {
			finalColor.a = uMaterialDiffuse.a;
			}
			else {
			finalColor.a = 1.0;
			}

			if (uUseTextures){
			gl_FragColor =  finalColor * texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));
			}
			else{
			gl_FragColor = finalColor;
			}
			}

			}
		</script>
		<script id='code-js' type="text/javascript">
            var camera = null;
            var interactor = null;
            var picker = null;
            var transforms = null;
            var showPickingImage = false;

            function configure() {
                gl.clearColor(0.3, 0.3, 0.3, 1.0);
                gl.clearDepth(100.0);
                gl.enable(gl.DEPTH_TEST);
                gl.depthFunc(gl.LESS);
                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);

                //Creates and sets up the camera location
                camera = new Camera(CAMERA_ORBITING_TYPE);
                camera.goHome([0, 0, 40]);
                camera.setFocus([0.0, 0.0, 0.0]);
                camera.setElevation(-40);
                camera.setAzimuth(-30);
                camera.hookRenderer = render;

                var canvas = document.getElementById('canvas-element-id');

                //Scene Picker
                picker = new Picker(canvas);
                picker.processHitsCallback = processHits;
                picker.addHitCallback = addHit;
                picker.removeHitCallback = removeHit;
                picker.hitPropertyCallback = hitProperty;
                picker.moveCallback = movePickedObjects;

                //Creates and sets up the mouse and keyboard interactor
                interactor = new CameraInteractor(camera, canvas);
                interactor.setPicker(picker);

                //Scene Transforms
                transforms = new SceneTransforms(camera);

                //init transforms
                transforms.init();

                //Program
                attributeList = ["aVertexPosition", "aVertexNormal", "aVertexColor", "aVertexTextureCoords"];
                uniformList = ["uPMatrix", "uMVMatrix", "uNMatrix", "uMaterialDiffuse", "uMaterialAmbient", "uLightAmbient", "uLightDiffuse", "uLightPosition", "uWireframe", "uAlpha", "uUseVertexColor", "uOffscreen", "uSampler", "uUseTextures"];

                Program.load(attributeList, uniformList);

                gl.uniform3fv(Program.uLightPosition, [0, 5, 20]);
                gl.uniform4fv(Program.uLightAmbient, [0.0, 0.0, 0.0, 1.0]);
                gl.uniform4fv(Program.uLightDiffuse, [1.0, 1.0, 1.0, 1.0]);
                gl.uniform1f(Program.uAlpha, 1.0);
                console.log( Program );
            }

            /**
             * Loads the scene
             */
            function load() {
                //Floor.build(80, 2);
                Scene.addObject(Floor);
                Scene.loadObject('static/voxdata/models/texCube.json', 'cube', {
                    position : [1, 2, 7],
                    scale : [2, 2, 1],
                    rotation : [0,0,0],
                    ambient : [0.4, 0.4, 0.4, 1.0]
                }, function(){

                    $('.loc').each( function( i, l ) { 
                                          var p = Scene.getObject('cube').position; 
                                          $(l).val( p[i] );
                                          $(l).bind( 'change', function(e) { p[i] = $(l).val(); } ); 
                                                      } );
                    $('.rot').each( function( i, l ) { 
                                          var p = Scene.getObject('cube').rotation; 
                                          $(l).val( p[i] ); 
                                          $(l).bind( 'change', function(e) { p[i] = $(l).val(); } ); 
                                                      } );
                });
                camera.goHome();

            }

            function render() {
                //off-screen rendering
                gl.bindFramebuffer(gl.FRAMEBUFFER, picker.framebuffer);
                gl.uniform1i(Program.uOffscreen, true);
                draw();
                //on-screen rendering
                gl.uniform1i(Program.uOffscreen, showPickingImage);
                gl.bindFramebuffer(gl.FRAMEBUFFER, null);
                draw();

            }

            function hitProperty(ob) {
                return ob.diffuse;
            }

            function addHit(ob) {
                ob.previous = ob.diffuse.slice(0);
                ob.diffuse[3] = 0.5;
                render();
            }

            function removeHit(ob) {
                ob.diffuse = ob.previous.slice(0);
                render();

            }

            function processHits(hits) {
                var names = '';
                for(var i = 0; i < hits.length; i++) {
                    var ob = hits[i];
                    ob.diffuse = ob.previous;
                    names += ob.alias + ' ';
                }
                render();

            }

            function movePickedObjects(interactor, dx, dy) {

                if(picker.plist.length == 0)
                    return;

                var camera = interactor.camera;
                var depth = (interactor.alt != 0);

                for(var i = 0, max = picker.plist.length; i < max; i += 1) {
                    var ob = this.plist[i];
                    var pos = vec3.create([ob.position[0], ob.position[1], ob.position[2]]);

                    var scaleY = vec3.create();
                    var scaleX = vec3.create();

                    var factor = Math.max(Math.max(camera.position[0], camera.position[1]), camera.position[2]) / 1000;

                    if(!depth) {
                        vec3.scale(camera.up, -dy * factor, scaleY);
                        vec3.scale(camera.right, dx * factor, scaleX);
                    } else {
                        vec3.scale(camera.normal, dy * factor, scaleY);
                    }

                    vec3.add(pos, scaleY);
                    vec3.add(pos, scaleX);

                    ob.position[0] = pos[0];
                    ob.position[1] = pos[1];
                    ob.position[2] = pos[2];
                }
                render();
            }

            /**
             * invoked on every rendering cycle
             */
            function draw() {
                gl.viewport(0, 0, c_width, c_height);
                gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
                transforms.updatePerspective();
                try {
                    var offscreen = Program.getUniform(Program.uOffscreen);

                    for(var i = 0; i < Scene.objects.length; i++) {

                        var object = Scene.objects[i];

                        if(object.alias == 'floor' && (showPickingImage || offscreen)) {
                            continue;
                        }

                        if(object.diffuse[3] < 1.0 && !offscreen) {
                            gl.disable(gl.DEPTH_TEST);
                            gl.enable(gl.BLEND);
                        } else {
                            gl.enable(gl.DEPTH_TEST);
                            gl.disable(gl.BLEND);
                        }

                        transforms.calculateModelView();
                        transforms.push();
                        if(object.alias != 'floor') {
                            mat4.translate(transforms.mvMatrix, object.position);
                            mat4.rotateX(transforms.mvMatrix, object.rotation[0]);
                            mat4.rotateY( transforms.mvMatrix, object.rotation[1]); 
                            mat4.rotateZ( transforms.mvMatrix, object.rotation[2]);
                            mat4.scale(transforms.mvMatrix, object.scale);
                        }
                        transforms.setMatrixUniforms();
                        transforms.pop();

                        //Setting uniforms
                        gl.uniform4fv(Program.uMaterialDiffuse, object.diffuse);
                        gl.uniform4fv(Program.uMaterialAmbient, object.ambient);
                        gl.uniform1i(Program.uWireframe, object.wireframe);
                        gl.uniform1i(Program.uUseVertexColor, false);
                        gl.uniform1i(Program.uUseTextures, false);

                        //Setting attributes
                        gl.enableVertexAttribArray(Program.aVertexPosition);
                        gl.disableVertexAttribArray(Program.aVertexNormal);
                        gl.disableVertexAttribArray(Program.aVertexColor);
                        gl.disableVertexAttribArray(Program.aVertexTextureCoords);

                        //Bind Array Buffer
                        gl.bindBuffer(gl.ARRAY_BUFFER, object.vbo);
                        gl.vertexAttribPointer(Program.aVertexPosition, 3, gl.FLOAT, false, 0, 0);
                        gl.enableVertexAttribArray(Program.aVertexPosition);

                        if(!offscreen && !showPickingImage) {
                            //render scalars
                            if(object.scalars != null) {
                                gl.enableVertexAttribArray(Program.aVertexColor);
                                gl.uniform1i(Program.uUseVertexColor, true);
                                gl.bindBuffer(gl.ARRAY_BUFFER, object.cbo);
                                gl.vertexAttribPointer(Program.aVertexColor, 4, gl.FLOAT, false, 0, 0);

                            }

                            //render textures
                            if(object.texture_coords) {
                                gl.enableVertexAttribArray(Program.aVertexTextureCoords);
                                gl.uniform1i(Program.uUseTextures, true);
                                gl.bindBuffer(gl.ARRAY_BUFFER, object.tbo);
                                gl.vertexAttribPointer(Program.aVertexTextureCoords, 2, gl.FLOAT, false, 0, 0);
                                gl.activeTexture(gl.TEXTURE0);
                                gl.bindTexture(gl.TEXTURE_2D, object.texture.tex);
                                gl.uniform1i(Program.uSampler, 0);
                            }
                        } else {
                            gl.uniform1i(Program.uUseTextures, false);
                            gl.uniform1i(Program.uUseVertexColors, false);
                        }

                        if(!object.wireframe) {
                            gl.bindBuffer(gl.ARRAY_BUFFER, object.nbo);
                            gl.vertexAttribPointer(Program.aVertexNormal, 3, gl.FLOAT, false, 0, 0);
                            gl.enableVertexAttribArray(Program.aVertexNormal);
                        }
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, object.ibo);

                        if(object.wireframe) {
                            gl.drawElements(gl.LINES, object.indices.length, gl.UNSIGNED_SHORT, 0);
                        } else {
                            gl.drawElements(gl.TRIANGLES, object.indices.length, gl.UNSIGNED_SHORT, 0);
                        }

                        gl.bindBuffer(gl.ARRAY_BUFFER, null);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
                    }

                    current_canvas_render = document.getElementById("canvas-element-id").toDataURL();

                } catch(err) {
                    alert(err);
                    console.error(err.description);
                }
            }

            /**
             * Entry point. This function is invoked when the page is loaded
             */
            var app = null;
            function runVoxApp() {
                app = new WebGLApp("canvas-element-id");
                app.configureGLHook = configure;
                app.loadSceneHook = load;
                app.drawSceneHook = render;

                app.run();

            }

		</script>

    <!-- Application -->
        <script type="text/javascript">
                var app_router = Backbone.Router.extend({
                    routes: {
                        "camera" :      "camera",
                        "calibration" : "calibration",
                        "results" :     "results"
                    },
                    initialize: function(o) {
                        this.app = o.app;
                    },
                    camera : function() {  
                        
                    },
                    calibration : function() { 
                    },
                    results : function() { 
                    } 

                });
               var simcam = Backbone.View.extend({ 
                        el: $('#main_container'),
                        initialize: function() {
                            this.router = new app_router({ app : this } );
                            runVoxApp();
                            Backbone.history.start();
                            this.graph ={ 'count' : 0, 
                                          'series' : [ 
                                                        {name : 'd1', data: [] },
                                                        {name : 'd2', data: [] },
                                                        {name : 'd3', data: [] },
                                                        {name : 'd4', data: [] },
                                                        {name : 'd5', data: [] },
                                                        {name : 'i1', data: [] },
                                                        {name : 'i2', data: [] },
                                                        {name : 'i3', data: [] },
                                                        {name : 'i4', data: [] },
                                                        {name : 'i5', data: [] },
                                                        {name : 'i6', data: [] },
                                                        {name : 'i7', data: [] },
                                                        {name : 'i8', data: [] },
                                                        {name : 'i9', data: [] },

                                                 
                                                                  ],
                                           'min' : [0, 0], 'max' : [0,0] };
                        },
                        events : {
                        'click #check_grid' : 'check',
                        'click #reset' : 'reset'
    
                        },
                        get_calib : function() { 
                           var that = this; 
                          $.ajax({
                                type: 'GET',
                                url: '<: $c.uri_for('/calibrate'); :>',
                                dataType : "json",
                                success : function(data) {
                                    var offset = 0;

                                $('#Distortion').find('td').each( function( i, e ) {
                                            var dd =  parseFloat(data.distortion[i]);
                                           $(e).html( dd );
                                            that.graph.series[offset].data.push( dd);
                                             offset++;
                                                                           });
                                    
                                 $('#Intrinsics').find('td').each( function( i, e ) {
                                        var di =  parseFloat(data.intrinsics[i]);
                                           $(e).html(di );

                                            $(that.graph.series[offset].data).push( di );
                                             offset++;                                     });

                                         if( that.graph.count++ >= 1 )
                                        {
                                            that.render_graphs();
                                        }

                                }, error : function(r,res, e) { alert( r.responseText );}
                            });
        


                        },
                        check : function() {
                            var that = this;
                            $.ajax({
                                type: 'POST',
                                url: '<: $c.uri_for('/capture_images'); :>',
                                data : { "uri" : current_canvas_render},
                                dataType : "json",
                                success : function(data) {
                                var a =  $('#images').find('tbody').append( $('<tr><td></td><td><td><td></td></tr>')  );
                                    var tr = a.find('td');
                                   if( data.found) 
                                    {
                                      var tds = tr[ 0 ];
                                        $(tds).append('<img width="300px" src="'+current_canvas_render+'" />');
                                      var td =  tr[ 1 ];
                                        $(td).append('<img src="'+data.found+'" width="300px" />');
                                        that.get_calib(); 
                                    }
                                    else
                                    {
                                        alert('OpenCV couldnt find checkboard pattern');
                                    }
                            
                                }
                            });
        
                        },
                        reset : function () {
                        //Scene.getObject('cube').position = [1, 2, 7];

                        camera.goHome();
                        //camera.setElevation(-40);
                        //camera.setAzimuth(-30);
                        showPickingImage = false;

                        },
                        render_graphs : function() {
                            var that = this;
                        var x_axis = new Array( this.graph.count );
                        $(x_axis).each( function( i) { x_axis[i]=i; } );
                    var chart = new Highcharts.Chart({
                    chart: {
                        renderTo: 'g_container',
                        type: 'line',
                        marginRight: 130,
                        marginBottom: 25
                    },
                    title: {
                        text: 'Calibration Parameters to Grid Placement',
                        x: -20 //center
                    },
                    subtitle: {
                        text: 'Grid Placements are Shown Below',
                        x: -20
                    },
                    xAxis: {
                        title: {
                            text: 'Grid NUmber'
                        },
                        categories: x_axis 
                    },
                    yAxis: {
                        title: {
                            text: 'Parameter'
                        },
                        plotLines: [{
                            value: 0,
                            width: 1,
                            color: '#808080'
                        }]
                    },
                    tooltip: {
                        formatter: function() {
                                return '<b>'+ this.series.name +'</b><br/>'+
                                this.x +': '+ this.y +' units';
                        }
                    },
                    legend: {
                        layout: 'vertical',
                        align: 'right',
                        verticalAlign: 'top',
                        x: -10,
                        y: 100,
                        borderWidth: 0
                    },
                    series: that.graph.series
                });
                    
                        }
                        
                    });
        </script>

    <!-- Javascript -->
        <script type="text/javascript"> 
            var app;
            $( function()
                {
                    app = new simcam();
                    
                }
             );
        </script>
	</body>
</html>
        
