<!DOCTYPE html>
<html lang="en">
	<head>
		
		<head>
		<meta charset="utf-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
		<meta name="description" content="SimCam Prototype 1.0" />
		<meta name="author" content="Kartik Thakore" />
		<meta name="viewport" content="width=device-width; initial-scale=1.0" />
        <link href='<: $c.uri_for('/static') :>/css/smoothness/jquery-ui-1.8.16.custom.css' type='text/css' rel='stylesheet' />
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/jquery.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/jquery-ui.js'></script>
		<title>SimCam: Prototype</title>
        
        <!-- MATH Libraries //-->
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/math/glMatrix-0.9.5.min.js'></script>
		<!-- WEBGL Libraries //-->
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/Globals.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/Utils.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/Program.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/Scene.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/Axis.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/Floor.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/Camera.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/CameraInteractor.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/SceneTransforms.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/Texture.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/WebGLApp.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/webgl/Picker.js'></script>

		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/base64.js'></script>
		<script type='text/javascript' src='<: $c.uri_for('/static') :>/js/canvas2image.js'></script>
        <script type='text/javascript'>
          
            var current_canvas_render;

        </script>

		<script id="shader-vs" type="x-shader/x-vertex">
			attribute vec3 aVertexPosition;
			attribute vec3 aVertexNormal;
			attribute vec4 aVertexColor;
			attribute vec2 aVertexTextureCoords;

			uniform mat4 uMVMatrix;
			uniform mat4 uPMatrix;
			uniform mat4 uNMatrix;
			uniform vec3 uLightPosition;
			uniform vec4 uMaterialDiffuse;
			uniform bool uWireframe;
			uniform bool uUseVertexColor;
			uniform bool uUseTextures;

			varying vec3 vNormal;
			varying vec3 vLightRay;
			varying vec3 vEyeVec;
			varying vec4 vFinalColor;
			varying vec2 vTextureCoord;

			void main(void) {

			vFinalColor = uMaterialDiffuse;
			vTextureCoord = vec2(0.0);

			if (uUseVertexColor){
			vFinalColor = aVertexColor;
			}

			if (uUseTextures){
			vTextureCoord = aVertexTextureCoords;
			}

			vec4 vertex = uMVMatrix * vec4(aVertexPosition, 1.0);
			vNormal = vec3(uNMatrix * vec4(aVertexNormal, 1.0));
			vec4 light = vec4(uLightPosition,1.0);
			vLightRay = vertex.xyz-light.xyz;
			vEyeVec = -vec3(vertex.xyz);

			gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);

			}
		</script>
		<script id="shader-fs" type="x-shader/x-fragment">
			#ifdef GL_ES
			precision highp float;
			#endif

			uniform bool uWireframe;
			uniform bool uUseTextures;

			uniform vec4 uLightAmbient;
			uniform vec4 uLightDiffuse;
			uniform vec4 uMaterialAmbient;
			uniform vec4 uMaterialDiffuse;
			uniform bool uOffscreen;

			uniform sampler2D uSampler;

			varying vec3 vNormal;
			varying vec3 vLightRay;
			varying vec3 vEyeVec;
			varying vec4 vFinalColor;
			varying vec2 vTextureCoord;

			void main(void)
			{
			if(uOffscreen){
			gl_FragColor = uMaterialDiffuse;
			return;
			}

			if(uWireframe){
			gl_FragColor = vFinalColor;
			}
			else{
			//ambient term
			vec4 Ia = uLightAmbient * uMaterialAmbient;

			//diffuse term
			vec3 L = normalize(vLightRay);
			vec3 N = normalize(vNormal);
			float lambertTerm = max(dot(N,-L),0.33);
			vec4 Id = uLightDiffuse * uMaterialDiffuse * lambertTerm;

			//specular term
			vec3 E = normalize(vEyeVec);
			vec3 R = reflect(L, N);
			float specular = pow( max(dot(R, E), 0.5), 50.0);
			vec4 Is = vec4(0.5) * specular;

			//result
			vec4 finalColor = Ia + Id + Is;

			if (uMaterialDiffuse.a != 1.0) {
			finalColor.a = uMaterialDiffuse.a;
			}
			else {
			finalColor.a = 1.0;
			}

			if (uUseTextures){
			gl_FragColor =  finalColor * texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));
			}
			else{
			gl_FragColor = finalColor;
			}
			}

			}
		</script>
		<script id='code-js' type="text/javascript">
            var camera = null;
            var interactor = null;
            var picker = null;
            var transforms = null;
            var showPickingImage = false;

            function configure() {
                gl.clearColor(0.3, 0.3, 0.3, 1.0);
                gl.clearDepth(100.0);
                gl.enable(gl.DEPTH_TEST);
                gl.depthFunc(gl.LESS);
                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);

                //Creates and sets up the camera location
                camera = new Camera(CAMERA_ORBITING_TYPE);
                camera.goHome([0, 0, 40]);
                camera.setFocus([0.0, 0.0, 0.0]);
                camera.setElevation(-40);
                camera.setAzimuth(-30);
                camera.hookRenderer = render;

                var canvas = document.getElementById('canvas-element-id');

                //Scene Picker
                picker = new Picker(canvas);
                picker.processHitsCallback = processHits;
                picker.addHitCallback = addHit;
                picker.removeHitCallback = removeHit;
                picker.hitPropertyCallback = hitProperty;
                picker.moveCallback = movePickedObjects;

                //Creates and sets up the mouse and keyboard interactor
                interactor = new CameraInteractor(camera, canvas);
                interactor.setPicker(picker);

                //Scene Transforms
                transforms = new SceneTransforms(camera);

                //init transforms
                transforms.init();

                //Program
                attributeList = ["aVertexPosition", "aVertexNormal", "aVertexColor", "aVertexTextureCoords"];
                uniformList = ["uPMatrix", "uMVMatrix", "uNMatrix", "uMaterialDiffuse", "uMaterialAmbient", "uLightAmbient", "uLightDiffuse", "uLightPosition", "uWireframe", "uAlpha", "uUseVertexColor", "uOffscreen", "uSampler", "uUseTextures"];

                Program.load(attributeList, uniformList);

                gl.uniform3fv(Program.uLightPosition, [0, 5, 20]);
                gl.uniform4fv(Program.uLightAmbient, [0.0, 0.0, 0.0, 1.0]);
                gl.uniform4fv(Program.uLightDiffuse, [1.0, 1.0, 1.0, 1.0]);
                gl.uniform1f(Program.uAlpha, 1.0);
            }

            /**
             * Loads the scene
             */
            function load() {
                Floor.build(80, 2);
                Scene.addObject(Floor);
                Scene.loadObject('static/voxdata/models/texCube.json', 'cube', {
                    position : [1, 2, 7],
                    scale : [2, 2, 1],
                    ambient : [0.4, 0.4, 0.4, 1.0]
                });
            }

            function render() {
                //off-screen rendering
                gl.bindFramebuffer(gl.FRAMEBUFFER, picker.framebuffer);
                gl.uniform1i(Program.uOffscreen, true);
                draw();
                //on-screen rendering
                gl.uniform1i(Program.uOffscreen, showPickingImage);
                gl.bindFramebuffer(gl.FRAMEBUFFER, null);
                draw();

            }

            function hitProperty(ob) {
                return ob.diffuse;
            }

            function addHit(ob) {
                ob.previous = ob.diffuse.slice(0);
                ob.diffuse[3] = 0.5;
                render();
            }

            function removeHit(ob) {
                ob.diffuse = ob.previous.slice(0);
                render();

            }

            function processHits(hits) {
                var names = '';
                for(var i = 0; i < hits.length; i++) {
                    var ob = hits[i];
                    ob.diffuse = ob.previous;
                    names += ob.alias + ' ';
                }
                render();
                //Current data ready  
                current_canvas_render = document.getElementById("canvas-element-id").toDataURL();;

                 $('#images').append( $('<img width="300px" src="'+current_canvas_render+'" />')  );
                        $.ajax({
                            type: 'POST',
                            url: '<: $c.uri_for('/capture_images'); :>',
                            data : { "uri" : current_canvas_render},
                            dataType : "json",
                            success : function(data) {
                                console.log(data);
                            }
                        });
                        

            }

            function movePickedObjects(interactor, dx, dy) {

                if(picker.plist.length == 0)
                    return;

                var camera = interactor.camera;
                var depth = (interactor.alt != 0);

                for(var i = 0, max = picker.plist.length; i < max; i += 1) {
                    var ob = this.plist[i];
                    var pos = vec3.create([ob.position[0], ob.position[1], ob.position[2]]);

                    var scaleY = vec3.create();
                    var scaleX = vec3.create();

                    var factor = Math.max(Math.max(camera.position[0], camera.position[1]), camera.position[2]) / 1000;

                    if(!depth) {
                        vec3.scale(camera.up, -dy * factor, scaleY);
                        vec3.scale(camera.right, dx * factor, scaleX);
                    } else {
                        vec3.scale(camera.normal, dy * factor, scaleY);
                    }

                    vec3.add(pos, scaleY);
                    vec3.add(pos, scaleX);

                    ob.position[0] = pos[0];
                    ob.position[1] = pos[1];
                    ob.position[2] = pos[2];
                }
                render();
            }

            /**
             * invoked on every rendering cycle
             */
            function draw() {
                gl.viewport(0, 0, c_width, c_height);
                gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
                transforms.updatePerspective();
                try {
                    var offscreen = Program.getUniform(Program.uOffscreen);

                    for(var i = 0; i < Scene.objects.length; i++) {

                        var object = Scene.objects[i];

                        if(object.alias == 'floor' && (showPickingImage || offscreen)) {
                            continue;
                        }

                        if(object.diffuse[3] < 1.0 && !offscreen) {
                            gl.disable(gl.DEPTH_TEST);
                            gl.enable(gl.BLEND);
                        } else {
                            gl.enable(gl.DEPTH_TEST);
                            gl.disable(gl.BLEND);
                        }

                        transforms.calculateModelView();
                        transforms.push();
                        if(object.alias != 'floor') {
                            mat4.translate(transforms.mvMatrix, object.position);
                            mat4.scale(transforms.mvMatrix, object.scale);
                        }
                        transforms.setMatrixUniforms();
                        transforms.pop();

                        //Setting uniforms
                        gl.uniform4fv(Program.uMaterialDiffuse, object.diffuse);
                        gl.uniform4fv(Program.uMaterialAmbient, object.ambient);
                        gl.uniform1i(Program.uWireframe, object.wireframe);
                        gl.uniform1i(Program.uUseVertexColor, false);
                        gl.uniform1i(Program.uUseTextures, false);

                        //Setting attributes
                        gl.enableVertexAttribArray(Program.aVertexPosition);
                        gl.disableVertexAttribArray(Program.aVertexNormal);
                        gl.disableVertexAttribArray(Program.aVertexColor);
                        gl.disableVertexAttribArray(Program.aVertexTextureCoords);

                        //Bind Array Buffer
                        gl.bindBuffer(gl.ARRAY_BUFFER, object.vbo);
                        gl.vertexAttribPointer(Program.aVertexPosition, 3, gl.FLOAT, false, 0, 0);
                        gl.enableVertexAttribArray(Program.aVertexPosition);

                        if(!offscreen && !showPickingImage) {
                            //render scalars
                            if(object.scalars != null) {
                                gl.enableVertexAttribArray(Program.aVertexColor);
                                gl.uniform1i(Program.uUseVertexColor, true);
                                gl.bindBuffer(gl.ARRAY_BUFFER, object.cbo);
                                gl.vertexAttribPointer(Program.aVertexColor, 4, gl.FLOAT, false, 0, 0);

                            }

                            //render textures
                            if(object.texture_coords) {
                                gl.enableVertexAttribArray(Program.aVertexTextureCoords);
                                gl.uniform1i(Program.uUseTextures, true);
                                gl.bindBuffer(gl.ARRAY_BUFFER, object.tbo);
                                gl.vertexAttribPointer(Program.aVertexTextureCoords, 2, gl.FLOAT, false, 0, 0);
                                gl.activeTexture(gl.TEXTURE0);
                                gl.bindTexture(gl.TEXTURE_2D, object.texture.tex);
                                gl.uniform1i(Program.uSampler, 0);
                            }
                        } else {
                            gl.uniform1i(Program.uUseTextures, false);
                            gl.uniform1i(Program.uUseVertexColors, false);
                        }

                        if(!object.wireframe) {
                            gl.bindBuffer(gl.ARRAY_BUFFER, object.nbo);
                            gl.vertexAttribPointer(Program.aVertexNormal, 3, gl.FLOAT, false, 0, 0);
                            gl.enableVertexAttribArray(Program.aVertexNormal);
                        }
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, object.ibo);

                        if(object.wireframe) {
                            gl.drawElements(gl.LINES, object.indices.length, gl.UNSIGNED_SHORT, 0);
                        } else {
                            gl.drawElements(gl.TRIANGLES, object.indices.length, gl.UNSIGNED_SHORT, 0);
                        }

                        gl.bindBuffer(gl.ARRAY_BUFFER, null);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
                    }
                } catch(err) {
                    alert(err);
                    console.error(err.description);
                }
            }

            /**
             * Entry point. This function is invoked when the page is loaded
             */
            var app = null;
            function runVoxApp() {
                app = new WebGLApp("canvas-element-id");
                app.configureGLHook = configure;
                app.loadSceneHook = load;
                app.drawSceneHook = render;
                app.run();
            }
		</script>
	</head>
	<body onload='runVoxApp()'>
		<table>
			<tr>
				<td></td>
		    </tr>
			<tr>
				<td>
				<canvas id = 'canvas-element-id' width='1200' height='500'>
					<p>
						Your browser does not support WebGL :-(
					</p>
				</canvas></td>
			</tr>
			<tr>
				<td>
				<table style='padding=0px'>
					<tr>
						<td>
						<table id='coloring-table'>
							<tr>
								<td>
								<!--
                                 <input type="checkbox" id="show-picking-btn" />
								 <label for="show-picking-btn">Show Picking Image</label> 
                                 -->
                                
                                </td> 
								<td><a id="capture-img">Capture Image</a><a id="reset-btn" />Reset Scene</a></td>
							</tr>
						</table></td>
					</tr>
				</table></td>
			</tr>
            <tr id="images">
            </tr>
</table>
				<script>
                    $('#show-picking-btn, #reset-btn, #capture-img').button();

                    $('#show-picking-btn').click(function() {
                        showPickingImage = !showPickingImage

                    });

                    $('#capture-img').click(function() {
                        $.ajax({
                            type: 'POST',
                            url: '<: $c.uri_for('/calibrate'); :>',
                            data : { "uri" : current_canvas_render},
                            dataType : "json",
                            success : function(data) {
                                console.log(data.missg);
                            }
                        });
                        
                    });

                    $('#reset-btn').click(function() {

                        //Scene.getObject('cube').position = [1, 2, 7];

                        camera.goHome();
                        //camera.setElevation(-40);
                        //camera.setAzimuth(-30);
                        showPickingImage = false;
                    });

				</script>
	</body>
</html>
        
