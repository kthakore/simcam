<div class="row">

    <h1>The Camera</h1>

    <p> 
      The concept of a camera has been around for a while. Surely you may be familiar with cameras
      and capturing images with them. To begin understanding of camera calibration we begin with modelling
      the camera.</p>
    <div class="span4"> <img src="/images/session_1_camera.gif" /> <br /> <center><span style="clear:both" class="small"> <a href="http://www.cs.columbia.edu/~jebara/htmlpapers/SFM/node6.html">source</a> </span></center> </div>

    <p> The camera essentially, for the purpose of this training environment, captures real world (3D) coordinates and maps them to an image screen (2D) coordinates.  
</div>

<div class="row">

    <h2>Pin hole Camera Model</h2>

    <p>The pinhole camera is a common model used to describe a camera. In this model the camera is described as a mathematical function called the perspective transform. This transform, transforms the 3D coordinates to 2D coordinates. </p>
    
</div>
    <% if( $user->type eq 'D' ) { %> 

<!--    Default  -->
    <% } elsif ( $user->type eq 'S' ) { %>

<!--    Simulator  -->
    <% } else {  %>

<!--    Simulator hints -->
    <% } %>

</div> 

% content_for javascript => begin
    <% if( $user->type eq 'S' or $user->type eq 'SH' ) { %>
        		<script src="js/libs/three.js"></script>

    <script type="text/javascript" src="js/views/main_camera_view.js"></script>
    <script type="text/javascript" src="js/views/side_camera_view.js"></script>


    <% } %>
    <script src="/js/tracker.js"></script>
    <!-- INSIDE SESSION 0 TEMPLATE -->
    <script type="text/javascript">
        var v = Backbone.View.extend({ 
            initialize: function() { console.log('start'); },
            events : { 'submit form': 'validate' },
            validate : function() {

                console.log('Validating form');
                return false;
            }
            });

        new v({el : $('body') });

    </script>
% end;


